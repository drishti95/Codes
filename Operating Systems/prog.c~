#include<stdio.h>
#include<sys/times.h>
#include<sys/wait.h>
#include<unistd.h>
#include<stdlib.h>
#include<time.h>
int *ar;

int max(int l,int r)
{
int i,m=0;
for(i=l;i<r;i++)
{
if(ar[i]>m)
m=ar[i];
}
return m;
}
 
int tree(int n,int l,int r)
{
static int i=o;
int m1,m2,h;
if(i==0)
{
int mypid,pypid;
mypid=getpid();
pypid=getppid();
i++;
}
if(i!=0)
{
if(n>10)
{
int pid1;
int h=n/2;
if((pid1=fork())==0)
{
int mypid,pypid;
mypid=getpid();
pypid=getppid();
printf("parent %u..child %u \n",pypid,mypid);
m1=tree(h,l,l+n/2);
sleep(1);
}
else
{
int mypid,pypid;
mypid=getpid();
pypid=getppid();
printf("parent %u..child %u \n",pypid,mypid);
m2=tree(n-h,l+n/2,r);
sleep(1);
}
return m1>m2?m1:m2;
}
else
{
return max(l,r);
}
}
}
main()
{
int i,n;
scanf("%d",&n);
ar=(int *)malloc(n*sizeof(int));
srand(time(NULL));
for(i=0;i<n;i++)
ar[i]=rand()%128;

printf("Elements are :\n");

for(i=0;i<n;i++)
printf("%d , ",ar[i]);

printf("\n");

int ans=tree(n,0,n);

printf("The maximum is: %d\n",ans);
}

